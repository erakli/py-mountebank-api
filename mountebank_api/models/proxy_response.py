import inspect
import pprint
import re  # noqa: F401

from mountebank_api.configuration import Configuration


class ProxyResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'str',
        'mode': 'str',
        'predicate_generators': 'list[PredicateGenerator]',
        'inject_headers': 'dict(str, str)',
    }

    attribute_map = {
        'to': 'to',
        'mode': 'mode',
        'predicate_generators': 'predicateGenerators',
        'inject_headers': 'injectHeaders',
    }

    def __init__(self, to=None, mode=None, predicate_generators=None, inject_headers=None, local_vars_configuration=None):  # noqa: E501
        """ProxyResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._to = None
        self._mode = None
        self._predicate_generators = None
        self._inject_headers = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if mode is not None:
            self.mode = mode
        if predicate_generators is not None:
            self.predicate_generators = predicate_generators
        if inject_headers is not None:
            self.inject_headers = inject_headers

    @property
    def to(self):
        """Gets the to of this ProxyResponse.  # noqa: E501


        :return: The to of this ProxyResponse.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ProxyResponse.


        :param to: The to of this ProxyResponse.  # noqa: E501
        :type to: str
        """

        self._to = to

    @property
    def mode(self):
        """Gets the mode of this ProxyResponse.  # noqa: E501


        :return: The mode of this ProxyResponse.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ProxyResponse.


        :param mode: The mode of this ProxyResponse.  # noqa: E501
        :type mode: str
        """
        allowed_values = ["proxyOnce", "proxyAlways"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def predicate_generators(self):
        """Gets the predicate_generators of this ProxyResponse.  # noqa: E501


        :return: The predicate_generators of this ProxyResponse.  # noqa: E501
        :rtype: list[PredicateGenerator]
        """
        return self._predicate_generators

    @predicate_generators.setter
    def predicate_generators(self, predicate_generators):
        """Sets the predicate_generators of this ProxyResponse.


        :param predicate_generators: The predicate_generators of this ProxyResponse.  # noqa: E501
        :type predicate_generators: list[PredicateGenerator]
        """

        self._predicate_generators = predicate_generators

    @property
    def inject_headers(self):
        """Gets the inject_headers of this ProxyResponse.  # noqa: E501

        Key-value pairs of headers to inject into the proxied request.  # noqa: E501

        :return: The inject_headers of this ProxyResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._inject_headers

    @inject_headers.setter
    def inject_headers(self, inject_headers):
        """Sets the inject_headers of this ProxyResponse.

        Key-value pairs of headers to inject into the proxied request.  # noqa: E501

        :param inject_headers: The inject_headers of this ProxyResponse.  # noqa: E501
        :type inject_headers: dict(str, str)
        """

        self._inject_headers = inject_headers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProxyResponse):
            return True

        return self.to_dict() != other.to_dict()
