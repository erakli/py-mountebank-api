import inspect
import pprint
import re  # noqa: F401

from mountebank_api.configuration import Configuration


class StubPredicate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'equals': 'object',
        'deep_equals': 'object',
        'contains': 'object',
        'starts_with': 'object',
        'ends_with': 'object',
        'matches': 'object',
        'exists': 'object',
        '_not': 'object',
        '_or': 'object',
        '_and': 'object',
        'case_sensitive': 'bool',
        '_except': 'str',
    }

    attribute_map = {
        'equals': 'equals',
        'deep_equals': 'deepEquals',
        'contains': 'contains',
        'starts_with': 'startsWith',
        'ends_with': 'endsWith',
        'matches': 'matches',
        'exists': 'exists',
        '_not': 'not',
        '_or': 'or',
        '_and': 'and',
        'case_sensitive': 'caseSensitive',
        '_except': 'except',
    }

    def __init__(self, equals=None, deep_equals=None, contains=None, starts_with=None, ends_with=None, matches=None, exists=None, _not=None, _or=None, _and=None, case_sensitive=None, _except=None, local_vars_configuration=None):  # noqa: E501
        """StubPredicate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._equals = None
        self._deep_equals = None
        self._contains = None
        self._starts_with = None
        self._ends_with = None
        self._matches = None
        self._exists = None
        self.__not = None
        self.__or = None
        self.__and = None
        self._case_sensitive = None
        self.__except = None
        self.discriminator = None

        if equals is not None:
            self.equals = equals
        if deep_equals is not None:
            self.deep_equals = deep_equals
        if contains is not None:
            self.contains = contains
        if starts_with is not None:
            self.starts_with = starts_with
        if ends_with is not None:
            self.ends_with = ends_with
        if matches is not None:
            self.matches = matches
        if exists is not None:
            self.exists = exists
        if _not is not None:
            self._not = _not
        if _or is not None:
            self._or = _or
        if _and is not None:
            self._and = _and
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if _except is not None:
            self._except = _except

    @property
    def equals(self):
        """Gets the equals of this StubPredicate.  # noqa: E501


        :return: The equals of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._equals

    @equals.setter
    def equals(self, equals):
        """Sets the equals of this StubPredicate.


        :param equals: The equals of this StubPredicate.  # noqa: E501
        :type equals: object
        """

        self._equals = equals

    @property
    def deep_equals(self):
        """Gets the deep_equals of this StubPredicate.  # noqa: E501


        :return: The deep_equals of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._deep_equals

    @deep_equals.setter
    def deep_equals(self, deep_equals):
        """Sets the deep_equals of this StubPredicate.


        :param deep_equals: The deep_equals of this StubPredicate.  # noqa: E501
        :type deep_equals: object
        """

        self._deep_equals = deep_equals

    @property
    def contains(self):
        """Gets the contains of this StubPredicate.  # noqa: E501


        :return: The contains of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this StubPredicate.


        :param contains: The contains of this StubPredicate.  # noqa: E501
        :type contains: object
        """

        self._contains = contains

    @property
    def starts_with(self):
        """Gets the starts_with of this StubPredicate.  # noqa: E501


        :return: The starts_with of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._starts_with

    @starts_with.setter
    def starts_with(self, starts_with):
        """Sets the starts_with of this StubPredicate.


        :param starts_with: The starts_with of this StubPredicate.  # noqa: E501
        :type starts_with: object
        """

        self._starts_with = starts_with

    @property
    def ends_with(self):
        """Gets the ends_with of this StubPredicate.  # noqa: E501


        :return: The ends_with of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._ends_with

    @ends_with.setter
    def ends_with(self, ends_with):
        """Sets the ends_with of this StubPredicate.


        :param ends_with: The ends_with of this StubPredicate.  # noqa: E501
        :type ends_with: object
        """

        self._ends_with = ends_with

    @property
    def matches(self):
        """Gets the matches of this StubPredicate.  # noqa: E501


        :return: The matches of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this StubPredicate.


        :param matches: The matches of this StubPredicate.  # noqa: E501
        :type matches: object
        """

        self._matches = matches

    @property
    def exists(self):
        """Gets the exists of this StubPredicate.  # noqa: E501


        :return: The exists of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this StubPredicate.


        :param exists: The exists of this StubPredicate.  # noqa: E501
        :type exists: object
        """

        self._exists = exists

    @property
    def _not(self):
        """Gets the _not of this StubPredicate.  # noqa: E501


        :return: The _not of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this StubPredicate.


        :param _not: The _not of this StubPredicate.  # noqa: E501
        :type _not: object
        """

        self.__not = _not

    @property
    def _or(self):
        """Gets the _or of this StubPredicate.  # noqa: E501


        :return: The _or of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this StubPredicate.


        :param _or: The _or of this StubPredicate.  # noqa: E501
        :type _or: object
        """

        self.__or = _or

    @property
    def _and(self):
        """Gets the _and of this StubPredicate.  # noqa: E501


        :return: The _and of this StubPredicate.  # noqa: E501
        :rtype: object
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this StubPredicate.


        :param _and: The _and of this StubPredicate.  # noqa: E501
        :type _and: object
        """

        self.__and = _and

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this StubPredicate.  # noqa: E501


        :return: The case_sensitive of this StubPredicate.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this StubPredicate.


        :param case_sensitive: The case_sensitive of this StubPredicate.  # noqa: E501
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def _except(self):
        """Gets the _except of this StubPredicate.  # noqa: E501

        Defines a regular expression that is stripped out of the request field before matching.   # noqa: E501

        :return: The _except of this StubPredicate.  # noqa: E501
        :rtype: str
        """
        return self.__except

    @_except.setter
    def _except(self, _except):
        """Sets the _except of this StubPredicate.

        Defines a regular expression that is stripped out of the request field before matching.   # noqa: E501

        :param _except: The _except of this StubPredicate.  # noqa: E501
        :type _except: str
        """

        self.__except = _except

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StubPredicate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StubPredicate):
            return True

        return self.to_dict() != other.to_dict()
