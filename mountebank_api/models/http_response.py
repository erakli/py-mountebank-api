import inspect
import pprint
import re  # noqa: F401

from mountebank_api.configuration import Configuration


class HttpResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status_code': 'int',
        'headers': 'object',
        'body': 'str',
        'mode': 'str',
    }

    attribute_map = {
        'status_code': 'statusCode',
        'headers': 'headers',
        'body': 'body',
        'mode': '_mode',
    }

    def __init__(self, status_code=None, headers=None, body=None, mode=None, local_vars_configuration=None):  # noqa: E501
        """HttpResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status_code = None
        self._headers = None
        self._body = None
        self._mode = None
        self.discriminator = None

        if status_code is not None:
            self.status_code = status_code
        if headers is not None:
            self.headers = headers
        if body is not None:
            self.body = body
        if mode is not None:
            self.mode = mode

    @property
    def status_code(self):
        """Gets the status_code of this HttpResponse.  # noqa: E501


        :return: The status_code of this HttpResponse.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this HttpResponse.


        :param status_code: The status_code of this HttpResponse.  # noqa: E501
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def headers(self):
        """Gets the headers of this HttpResponse.  # noqa: E501


        :return: The headers of this HttpResponse.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpResponse.


        :param headers: The headers of this HttpResponse.  # noqa: E501
        :type headers: object
        """

        self._headers = headers

    @property
    def body(self):
        """Gets the body of this HttpResponse.  # noqa: E501


        :return: The body of this HttpResponse.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this HttpResponse.


        :param body: The body of this HttpResponse.  # noqa: E501
        :type body: str
        """

        self._body = body

    @property
    def mode(self):
        """Gets the mode of this HttpResponse.  # noqa: E501


        :return: The mode of this HttpResponse.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this HttpResponse.


        :param mode: The mode of this HttpResponse.  # noqa: E501
        :type mode: str
        """
        allowed_values = ["text", "binary"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HttpResponse):
            return True

        return self.to_dict() != other.to_dict()
