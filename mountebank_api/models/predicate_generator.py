import inspect
import pprint
import re  # noqa: F401

from mountebank_api.configuration import Configuration


class PredicateGenerator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'matches': 'dict(str, bool)',
        'case_sensitive': 'bool',
    }

    attribute_map = {
        'matches': 'matches',
        'case_sensitive': 'caseSensitive',
    }

    def __init__(self, matches=None, case_sensitive=None, local_vars_configuration=None):  # noqa: E501
        """PredicateGenerator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._matches = None
        self._case_sensitive = None
        self.discriminator = None

        if matches is not None:
            self.matches = matches
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive

    @property
    def matches(self):
        """Gets the matches of this PredicateGenerator.  # noqa: E501

        The fields that need to be equal in subsequent requests to replay the saved response. Set the field value `true` to generate a predicate based on it. Nested fields, as in JSON fields or HTTP headers, are supported as well, as long as the leaf keys have a `true` value. If you set the parent object key (e.g. query) to `true`, the generated predicate will use `deepEquals`, requiring the entire object graph to match.   # noqa: E501

        :return: The matches of this PredicateGenerator.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this PredicateGenerator.

        The fields that need to be equal in subsequent requests to replay the saved response. Set the field value `true` to generate a predicate based on it. Nested fields, as in JSON fields or HTTP headers, are supported as well, as long as the leaf keys have a `true` value. If you set the parent object key (e.g. query) to `true`, the generated predicate will use `deepEquals`, requiring the entire object graph to match.   # noqa: E501

        :param matches: The matches of this PredicateGenerator.  # noqa: E501
        :type matches: dict(str, bool)
        """

        self._matches = matches

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this PredicateGenerator.  # noqa: E501


        :return: The case_sensitive of this PredicateGenerator.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this PredicateGenerator.


        :param case_sensitive: The case_sensitive of this PredicateGenerator.  # noqa: E501
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredicateGenerator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PredicateGenerator):
            return True

        return self.to_dict() != other.to_dict()
